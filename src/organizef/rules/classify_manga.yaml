rules:
  # 创建分类目录
  - name: "创建漫画分类目录"
    locations: ${locations}
    filters:
      - python: |
          import os
          from pathlib import Path

          # 需要创建的目录
          categories = ["1. 同人志", "2. 商业志", "3. 单行本", "4. 同人动画", "5. 同人CG", "6. 画集"]

          for category in categories:
              category_path = Path(location) / category
              if not category_path.exists():
                  category_path.mkdir(parents=True, exist_ok=True)
                  print(f"创建目录: {category}")

          # 只执行一次创建目录，返回False不处理文件
          return False
    actions:
      - shell: 'echo "目录创建完成"'

  # 分类漫画压缩包 - 同人志
  - name: "分类漫画压缩包 - 同人志"
    locations: ${locations}
    filters:
      - extension:
          - zip
          - rar
          - "7z"
          - cbz
          - cbr
      - python: |
          import re

          # 同人志关键词（包括正则表达式）
          keywords = ["doujin", "doujinshi", "同人", "同人志", "同人本", "同人作品", "同人小说", "(C\\d+)", "(COMIC1☆\\d+)", "(例大祭\\d*)", "(FF\\d+)", "(.*祭\\d*)"]
          filename = path.name.lower()

          # 检查是否包含同人志关键词（支持正则表达式）
          for keyword in keywords:
              if keyword.startswith('(') and keyword.endswith(')'):
                  # 正则表达式匹配
                  if re.search(keyword, filename, re.IGNORECASE):
                      return True
              else:
                  # 普通关键词匹配
                  if keyword.lower() in filename:
                      return True

          return False
    actions:
      - move: "{location}/1. 同人志/{path.name}"

  # 分类漫画压缩包 - 商业志
  - name: "分类漫画压缩包 - 商业志"
    locations: ${locations}
    filters:
      - extension:
          - zip
          - rar
          - "7z"
          - cbz
          - cbr
      - python: |
          import re

          # 商业志关键词（包括正则表达式）
          keywords = ["commercial", "商业", "商业志", "单行本", "magazine", "magazine", "anthology", "アンソロジー", "([^()]*)COMIC[^()]*", "([^()]*)快楽天[^()]*", "([^()]*)Comic[^()]*", "([^()]*)VOL[^()]*", "([^()]*)永遠娘[^()]*"]
          filename = path.name.lower()

          # 检查是否包含商业志关键词（支持正则表达式）
          for keyword in keywords:
              if keyword.startswith('(') and keyword.endswith(')'):
                  # 正则表达式匹配
                  if re.search(keyword, filename, re.IGNORECASE):
                      return True
              else:
                  # 普通关键词匹配
                  if keyword.lower() in filename:
                      return True

          return False
    actions:
      - move: "{location}/2. 商业志/{path.name}"

  # 分类漫画压缩包 - 单行本
  - name: "分类漫画压缩包 - 单行本"
    locations: ${locations}
    filters:
      - extension:
          - zip
          - rar
          - "7z"
          - cbz
          - cbr
      - python: |
          keywords = ["tankobon", "单行本", "volume", "vol", "巻", "第", "話"]
          filename = path.name.lower()
          for keyword in keywords:
              if keyword.lower() in filename:
                  return True
          return False
    actions:
      - move: "{location}/3. 单行本/{path.name}"

  # 分类漫画压缩包 - 同人动画
  - name: "分类漫画压缩包 - 同人动画"
    locations: ${locations}
    filters:
      - extension:
          - zip
          - rar
          - "7z"
          - cbz
          - cbr
      - python: |
          keywords = ["doujin anime", "同人动画", "同人動畫", "fan animation", "fan made anime", "parody anime"]
          filename = path.name.lower()

          # 检查是否包含同人动画关键词
          for keyword in keywords:
              if keyword.lower() in filename:
                  return True

          return False
    actions:
      - move: "{location}/4. 同人动画/{path.name}"

  # 分类漫画压缩包 - 同人CG
  - name: "分类漫画压缩包 - 同人CG"
    locations: ${locations}
    filters:
      - extension:
          - zip
          - rar
          - "7z"
          - cbz
          - cbr
      - python: |
          keywords = ["doujin cg", "同人CG", "同人cg", "fan cg", "fan art", "fan illustration", "parody cg"]
          filename = path.name.lower()

          # 检查是否包含同人CG关键词
          for keyword in keywords:
              if keyword.lower() in filename:
                  return True

          return False
    actions:
      - move: "{location}/5. 同人CG/{path.name}"

  # 分类漫画压缩包 - 画集
  - name: "分类漫画压缩包 - 画集"
    locations: ${locations}
    filters:
      - extension:
          - zip
          - rar
          - "7z"
          - cbz
          - cbr
      - python: |
          keywords = ["artbook", "画集", "art book", "杂图", "#pixiv", "画册"]
          filename = path.name.lower()

          # 检查是否包含画集关键词
          for keyword in keywords:
              if keyword.lower() in filename:
                  return True

          return False
    actions:
      - move: "{location}/6. 画集/{path.name}"

  # 检测损坏的压缩包
