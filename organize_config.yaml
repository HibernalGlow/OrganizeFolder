rules:
- actions:
  - shell: echo "目录创建完成"
  filters:
  - python: "import os\nfrom pathlib import Path\n\n# 需要创建的目录\ncategories = [\"1.\
      \ 同人志\", \"2. 商业志\", \"3. 单行本\", \"4. 同人动画\", \"5. 同人CG\", \"6. 画集\"]\n\nfor\
      \ category in categories:\n    category_path = Path(location) / category\n \
      \   if not category_path.exists():\n        category_path.mkdir(parents=True,\
      \ exist_ok=True)\n        print(f\"创建目录: {category}\")\n\n# 只执行一次创建目录，返回False不处理文件\n\
      return False\n"
  locations: &id001
  - path: D:\BaiduNetdiskDownload\2510\[mocha2popcorn (きびぃもか)]
  name: 创建漫画分类目录
- actions:
  - move: '{location}/1. 同人志/{path.name}'
  filters:
  - extension:
    - zip
    - rar
    - 7z
    - cbz
    - cbr
  - python: "import re\n\n# 同人志关键词（包括正则表达式）\nkeywords = [\"doujin\", \"doujinshi\"\
      , \"同人\", \"同人志\", \"同人本\", \"同人作品\", \"同人小说\", \"(C\\\\d+)\", \"(COMIC1☆\\\\\
      d+)\", \"(例大祭\\\\d*)\", \"(FF\\\\d+)\", \"(.*祭\\\\d*)\"]\nfilename = path.name.lower()\n\
      \n# 检查是否包含同人志关键词（支持正则表达式）\nfor keyword in keywords:\n    if keyword.startswith('(')\
      \ and keyword.endswith(')'):\n        # 正则表达式匹配\n        if re.search(keyword,\
      \ filename, re.IGNORECASE):\n            return True\n    else:\n        # 普通关键词匹配\n\
      \        if keyword.lower() in filename:\n            return True\n\nreturn\
      \ False\n"
  locations: *id001
  name: 分类漫画压缩包 - 同人志
- actions:
  - move: '{location}/2. 商业志/{path.name}'
  filters:
  - extension:
    - zip
    - rar
    - 7z
    - cbz
    - cbr
  - python: "import re\n\n# 商业志关键词（包括正则表达式）\nkeywords = [\"commercial\", \"商业\", \"\
      商业志\", \"单行本\", \"magazine\", \"magazine\", \"anthology\", \"アンソロジー\", \"([^()]*)COMIC[^()]*\"\
      , \"([^()]*)快楽天[^()]*\", \"([^()]*)Comic[^()]*\", \"([^()]*)VOL[^()]*\", \"\
      ([^()]*)永遠娘[^()]*\"]\nfilename = path.name.lower()\n\n# 检查是否包含商业志关键词（支持正则表达式）\n\
      for keyword in keywords:\n    if keyword.startswith('(') and keyword.endswith(')'):\n\
      \        # 正则表达式匹配\n        if re.search(keyword, filename, re.IGNORECASE):\n\
      \            return True\n    else:\n        # 普通关键词匹配\n        if keyword.lower()\
      \ in filename:\n            return True\n\nreturn False\n"
  locations: *id001
  name: 分类漫画压缩包 - 商业志
- actions:
  - move: '{location}/3. 单行本/{path.name}'
  filters:
  - extension:
    - zip
    - rar
    - 7z
    - cbz
    - cbr
  - python: "keywords = [\"tankobon\", \"单行本\", \"volume\", \"vol\", \"巻\", \"第\"\
      , \"話\"]\nfilename = path.name.lower()\nfor keyword in keywords:\n    if keyword.lower()\
      \ in filename:\n        return True\nreturn False\n"
  locations: *id001
  name: 分类漫画压缩包 - 单行本
- actions:
  - move: '{location}/4. 同人动画/{path.name}'
  filters:
  - extension:
    - zip
    - rar
    - 7z
    - cbz
    - cbr
  - python: "keywords = [\"doujin anime\", \"同人动画\", \"同人動畫\", \"fan animation\",\
      \ \"fan made anime\", \"parody anime\"]\nfilename = path.name.lower()\n\n# 检查是否包含同人动画关键词\n\
      for keyword in keywords:\n    if keyword.lower() in filename:\n        return\
      \ True\n\nreturn False\n"
  locations: *id001
  name: 分类漫画压缩包 - 同人动画
- actions:
  - move: '{location}/5. 同人CG/{path.name}'
  filters:
  - extension:
    - zip
    - rar
    - 7z
    - cbz
    - cbr
  - python: "keywords = [\"doujin cg\", \"同人CG\", \"同人cg\", \"fan cg\", \"fan art\"\
      , \"fan illustration\", \"parody cg\"]\nfilename = path.name.lower()\n\n# 检查是否包含同人CG关键词\n\
      for keyword in keywords:\n    if keyword.lower() in filename:\n        return\
      \ True\n\nreturn False\n"
  locations: *id001
  name: 分类漫画压缩包 - 同人CG
- actions:
  - move: '{location}/6. 画集/{path.name}'
  filters:
  - extension:
    - zip
    - rar
    - 7z
    - cbz
    - cbr
  - python: "keywords = [\"artbook\", \"画集\", \"art book\", \"杂图\", \"#pixiv\", \"\
      画册\"]\nfilename = path.name.lower()\n\n# 检查是否包含画集关键词\nfor keyword in keywords:\n\
      \    if keyword.lower() in filename:\n        return True\n\nreturn False\n"
  locations: *id001
  name: 分类漫画压缩包 - 画集
